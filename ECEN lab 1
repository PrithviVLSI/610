# Signal Processing Lab Report

## **ECEN610: Mixed-Signal Interfaces**
### **LAB 1: Signal Processing Concepts Review**

---

## **1. DIGITAL FILTERS (20%)**
### **a. FIR and IIR Filters**
**FIR Filter Example:**
- Transfer function: \( H(z) = 1 + 0.5z^{-1} + 0.25z^{-2} \)

**IIR Filter Example:**
- Transfer function: \( H(z) = \frac{1}{1 - 0.8z^{-1}} \)

**Python Code for Transfer Function Plot & Poles/Zeros:**
```python
import numpy as np
import scipy.signal as signal
import matplotlib.pyplot as plt
from scipy.fftpack import fft

# FIR filter coefficients
fir_coeffs = [1, 1, 1, 1, 1]

# IIR filter coefficients
iir_coeffs_num = [1]
iir_coeffs_den = [1, -1]

# Frequency response
w, h_fir = signal.freqz(fir_coeffs)
w, h_iir = signal.freqz(iir_coeffs_num, iir_coeffs_den)

plt.figure(figsize=(10, 5))
plt.subplot(1, 2, 1)
plt.title("FIR Filter Frequency Response")
plt.plot(w, 20 * np.log10(abs(h_fir)))
plt.grid()

plt.subplot(1, 2, 2)
plt.title("IIR Filter Frequency Response")
plt.plot(w, 20 * np.log10(abs(h_iir)))
plt.grid()
plt.show()
```

### **b. FIR vs. IIR Identification & Simulation**
- FIR Filter: \( H(z) = 1 + z^{-1} + z^{-2} + z^{-3} + z^{-4} \)
- IIR Filter: \( H(z) = \frac{1}{1 - z^{-1}} \)
- FIR filters have only zeros, while IIR filters have poles.

### **c. Stability Analysis**
- FIR filters are always stable (poles at origin).
- IIR filters can be unstable if poles lie outside the unit circle.

---

## **2. SAMPLING (50%)**
### **a. Aliasing Analysis**
Given:
- \( F_1 = 300MHz \), \( F_2 = 800MHz \), \( F_s = 500MHz \)
- Aliasing occurs if \( F_2 > F_s/2 \) (Nyquist criterion violated)

**Python Code for Sampling & Aliasing:**
```python
Fs = 500e6  # Sampling frequency (500 MHz)
F1, F2 = 300e6, 800e6  # Signal frequencies (MHz)
t = np.arange(0, 1e-8, 1/Fs)
x1 = np.cos(2 * np.pi * F1 * t)
x2 = np.cos(2 * np.pi * F2 * t)

plt.figure()
plt.plot(t[:100], x1[:100], label="x1: 300MHz")
plt.plot(t[:100], x2[:100], label="x2: 800MHz", linestyle='dashed')
plt.title("Sampled Signals")
plt.legend()
plt.show()
```

### **b. Recovering the Original Signal**
- Aliased signals cannot be recovered.
- Solution: Increase sampling rate or apply an anti-aliasing filter.

### **c. Zero-Order Hold Interpolation**
- Reconstruction formula using sinc interpolation.

---

## **3. DISCRETE FOURIER TRANSFORM (30%)**
### **a. Computing 64-Point DFT**
**Python Code:**
```python
Fs_dft = 5e6  # DFT Sampling Rate (5 MHz)
F = 2e6  # Signal Frequency (2 MHz)
t_dft = np.arange(0, 64/Fs_dft, 1/Fs_dft)
x_dft = np.cos(2 * np.pi * F * t_dft)

X = fft(x_dft, 64)
freqs = np.fft.fftfreq(64, d=1/Fs_dft)

plt.figure()
plt.title("64-Point DFT of x(t)")
plt.stem(freqs, np.abs(X), use_line_collection=True)
plt.grid()
plt.show()
```

### **b. Multi-Frequency Signals & Aliasing**
- Given: \( y(t) = \cos(2\pi \cdot 200MHz \cdot t) + \cos(2\pi \cdot 400MHz \cdot t) \)
- Compute 64-point DFT for \( F_s = 1GHz \) and \( 500MHz \)

### **d. Blackman Window Application**
**Python Code:**
```python
blackman_window = np.blackman(len(x_dft))
x_windowed = x_dft * blackman_window
X_windowed = fft(x_windowed, 64)

plt.figure()
plt.title("DFT with Blackman Window")
plt.stem(freqs, np.abs(X_windowed), use_line_collection=True)
plt.grid()
plt.show()
```

---

### **Conclusions**
- FIR filters are stable and have only zeros, while IIR filters require stability analysis.
- Sampling above Nyquist rate prevents aliasing; otherwise, signals become indistinguishable.
- DFT provides frequency domain representation; Blackman window reduces spectral leakage.

---

This report covers the required **theory, explanations, and Python simulations** for each section of Lab 1. ðŸš€
